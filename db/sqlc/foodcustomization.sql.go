// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: foodcustomization.sql

package db

import (
	"context"
)

const createFoodCustomization = `-- name: CreateFoodCustomization :one
INSERT INTO foodcustomization (
    food_id,
    customization_type,
    value)
VALUES (
           $1,
           $2,
           $3)
    RETURNING id, food_id, customization_type, value
`

type CreateFoodCustomizationParams struct {
	FoodID            int32  `json:"food_id"`
	CustomizationType string `json:"customization_type"`
	Value             string `json:"value"`
}

func (q *Queries) CreateFoodCustomization(ctx context.Context, arg CreateFoodCustomizationParams) (Foodcustomization, error) {
	row := q.db.QueryRowContext(ctx, createFoodCustomization, arg.FoodID, arg.CustomizationType, arg.Value)
	var i Foodcustomization
	err := row.Scan(
		&i.ID,
		&i.FoodID,
		&i.CustomizationType,
		&i.Value,
	)
	return i, err
}

const deleteFoodCustomization = `-- name: DeleteFoodCustomization :exec
DELETE FROM foodcustomization
WHERE id = $1
`

func (q *Queries) DeleteFoodCustomization(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFoodCustomization, id)
	return err
}

const listCustomizationsByFood = `-- name: ListCustomizationsByFood :many
SELECT id, food_id, customization_type, value FROM foodcustomization
WHERE food_id = $1
ORDER BY id
`

func (q *Queries) ListCustomizationsByFood(ctx context.Context, foodID int32) ([]Foodcustomization, error) {
	rows, err := q.db.QueryContext(ctx, listCustomizationsByFood, foodID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Foodcustomization
	for rows.Next() {
		var i Foodcustomization
		if err := rows.Scan(
			&i.ID,
			&i.FoodID,
			&i.CustomizationType,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFoodCustomization = `-- name: UpdateFoodCustomization :one
UPDATE foodcustomization
SET customization_type = $2, value = $3
WHERE id = $1
    RETURNING id, food_id, customization_type, value
`

type UpdateFoodCustomizationParams struct {
	ID                int32  `json:"id"`
	CustomizationType string `json:"customization_type"`
	Value             string `json:"value"`
}

func (q *Queries) UpdateFoodCustomization(ctx context.Context, arg UpdateFoodCustomizationParams) (Foodcustomization, error) {
	row := q.db.QueryRowContext(ctx, updateFoodCustomization, arg.ID, arg.CustomizationType, arg.Value)
	var i Foodcustomization
	err := row.Scan(
		&i.ID,
		&i.FoodID,
		&i.CustomizationType,
		&i.Value,
	)
	return i, err
}
